<?xml version="1.0"?>
<entry xmlns="http://www.w3.org/2005/Atom"><title>Persistent Static Variables</title><author><name>Matt Read</name></author><link rel="alternate" href="https://mattread.com/persistent-static-variables-across-instances-in-php"/><link rel="edit" href="https://mattread.com/persistent-static-variables-across-instances-in-php/atom"/><id>tag:mattread.com,2008:persistent-static-variables-across-instances-in-php/1213249473</id><updated>2008-06-12T01:44:33-04:00</updated><app:edited xmlns:app="http://www.w3.org/2007/app">2013-03-22T10:57:47-04:00</app:edited><published>2008-06-12T01:26:40-04:00</published><category term="code"/><category term="php"/><content type="html">Wait, What? Yeah that's what I thought too. Still no Idea what I'm talking about? Well, let's take a look at the following code. Let's call it "fred".&#xD;
&#xD;
&lt;pre class="highlight php"&gt;&#xD;
class foo {&#xD;
	function bar( $b = 0 )&#xD;
	{&#xD;
		static $a = 0;&#xD;
		if ( $b ) {&#xD;
			$a = $b;&#xD;
		}	&#xD;
		 echo $a;&#xD;
	}&#xD;
}&#xD;
&#xD;
$faz = new foo;&#xD;
$faz-&gt;bar(3);&#xD;
$baz = new foo;&#xD;
$baz-&gt;bar();&#xD;
foo::bar();&#xD;
foo:bar(1); &#xD;
$faz-&gt;bar();&#xD;
&lt;/pre&gt;&#xD;
&#xD;
The code above, named "fred", basically creates a static variable &lt;code&gt;$a&lt;/code&gt; inside the function &lt;code&gt;foo()&lt;/code&gt;. When you call &lt;code&gt;foo(0)&lt;/code&gt; it outputs the value of &lt;code&gt;$a&lt;/code&gt;. When you call &lt;code&gt;foo('x')&lt;/code&gt; , where x can be anything, it updates the value of &lt;code &gt;$a&lt;/code&gt; with &lt;code&gt;'x'&lt;/code&gt;, and outputs the new result.&#xD;
&#xD;
Now, what would expect "fred" to output? If your like me, then you are completely wrong. "fred" will actually output the following code.&#xD;
&#xD;
&lt;pre class="highlight php"&gt;&#xD;
&lt;![CDATA[&#xD;
/*&#xD;
Actual Outputs:&#xD;
$faz-&gt;bar(3); ==&gt; 3&#xD;
$baz-&gt;bar();  ==&gt; 3&#xD;
foo::bar();      ==&gt; 3&#xD;
foo:bar(1);     ==&gt; 1&#xD;
$faz-&gt;bar();   ==&gt; 1&#xD;
 &#xD;
Expected outputs:&#xD;
$faz-&gt;bar(3); ==&gt; 3&#xD;
$baz-&gt;bar();  ==&gt; 0&#xD;
foo::bar();      ==&gt; 0&#xD;
foo:bar(1);     ==&gt; 1&#xD;
$faz-&gt;bar();   ==&gt; 3&#xD;
*/&#xD;
]]&gt;&#xD;
&lt;/pre&gt;&#xD;
&#xD;
Yes, that's what I said at the start, "Persistent Static Variables Across Instances". The static variable &lt;code&gt;$a&lt;/code&gt; actually persists across the two instances of foo that "fred" created, and even into the static method call. This was completely unexpected, at least by me. So I'll ask, does anyone know if this is actually the expected behaviour, and why it is or is not?&#xD;
</content></entry>
